@import '../../sass/utils/variables';
@import '../../sass/utils/functions';
@import '../../sass/utils/mixins';

.form {
    margin-top: 24px;
    padding: 40px 16px;
    border-radius: 8px;
    background-color: getColor('main');
    @include boxShadow();

    @media screen and (min-width: $tablet) {
        padding: 40px 24px;
    }

    @media screen and (min-width: $desktop) {
        padding: 40px;
    }
}

.formContainer {
    display: grid;
    grid-template-columns: 1fr;
    row-gap: 20px;

    @media screen and (min-width: $tablet) {
        grid-template-columns: repeat(2, 1fr);
        column-gap: 24px;
    }

    @media screen and (min-width: $desktop) {
        grid-template-columns: repeat(3, 1fr);
        column-gap: 42px;
    }
}

.labelInput {
    display: block;
    position: relative;
    color: getColor('general');
    font-family: 'Poppins-Regular';
    @include font(16px, 16px);
}

.labelInput[for="date"] {
    @media screen and (min-width: $tablet) {
        grid-column: 1 / span 1 ;
        grid-row: 4 /span 1;
    }

    @media screen and (min-width: $desktop) {
        grid-column: 2 / span 1 ;
        grid-row: 1 /span 1;
    }
}

.labelInput[for="time"] {
    @media screen and (min-width: $tablet) {
        grid-column: 1 / span 1 ;
        grid-row: 5 /span 1;
    }

    @media screen and (min-width: $desktop) {
        grid-column: 2 / span 1 ;
        grid-row: 2 /span 1;
    }
}

.labelInput[for="location"] {
    @media screen and (min-width: $desktop) {
        grid-column: 2 / span 1 ;
        grid-row: 3 /span 1;
    }
}

.labelInputTitle {
    height: 180px;

    @media screen and (min-width: $tablet) {
        grid-column: 1 / span 1 ;
        grid-row: 2 /span 2;
    }
}

.input {
    margin-top: 8px;
    // padding: 16px calc(12px + 24px) 16px 12px;
    padding: 15px calc(11px + 24px) 15px 11px;
    font-family: 'Poppins-Regular';
    @include font(16px, 24px);
    color: getColor('text-main');
    border: 1px solid getColor('disable');
    border-radius: 8px;
    width: 100%;
    outline: transparent;

    &:focus {
        border-color: getColor('general');
    }
}

.inputArea {
    margin-top: 8px;
    // padding: 16px calc(12px + 24px) 16px 12px;
    padding: 15px calc(11px + 24px) 15px 11px;
    height: 156px;
    font-family: 'Poppins-Regular';
    @include font(16px, 24px);
    color: getColor('text-main');
    border: 1px solid getColor('disable');
    border-radius: 8px;
    width: 100%;
    // height: 156px;
    outline: transparent;
    resize: none;

    &:focus {
        border-color: getColor('general');
    }
}

.inputInvalid {
    border-color: getColor('category-High');

    &:focus {
        border-color: getColor('category-High');
    }
}

.errorFeedback {
    position: absolute;
    right: 19px;
    bottom: -20px;
    color: getColor('category-High');
    @include font(12px, 16px);
}

.buttonInputReset {
    position: absolute;
    // top: 41px;
    top: 40px;
    right: 12px;
    border: 0;
    padding: 0;
    display: inline-block;
    width: 24px;
    height: 24px;
    background-color: transparent;
}

.buttonInputResetIcon {
    height: 24px;
    width: 24px;
    stroke: getColor('disable');
    fill: transparent;

    .input:not(:placeholder-shown) + .buttonInputReset & {
        stroke: getColor('general');
    }

    .inputArea:not(:placeholder-shown) + .buttonInputReset & {
        stroke: getColor('general');
    }
}

.buttonResetIconInvalid {
    stroke: getColor('category-High');

    .input:not(:placeholder-shown) + .buttonInputReset & {
        stroke: getColor('category-High');
    }

    .inputArea:not(:placeholder-shown) + .buttonInputReset & {
        stroke: getColor('general');
    }
}

.inputDropdown {
    box-shadow: none !important;
    cursor: pointer;

    &:hover {
        border: 1px solid getColor('hover');
    }
}

.placeholderDropdown {
    color: transparent;

    .inputDropdown:hover & {
        color: getColor('hover') !important;
    }
}

.buttonInputDropdwonIcon {
    position: absolute;
    // top: 16px;
    top: 15px;
    right: 12px;
    height: 24px;
    width: 24px;
    stroke: getColor('disable');
    fill: transparent;
    @include transition-effect(stroke);

    .inputDropdown:hover & {
        stroke: getColor('hover');
    }
}

.menuDropdown {
    margin-top: 18px;
    padding: 0 16px;
    background-color: getColor('main');
    border: 0;
    border-radius: 8px;
    max-height: none;
    @include boxShadow();

    & div {
        padding: 16px 0;
        color: getColor('text-main');
        border-bottom: 1px solid getColor('disable');

        &:hover {
            background-color: inherit;
            color: getColor('hover');
        }

        &[aria-selected="true"] {
            background-color: inherit;
            color: getColor('general');
        }
    }

    & div:last-child {
        border-bottom: none;
    }
}

.inputDatePiker {
    &::placeholder {
        color: transparent;
    }

    &:hover {
        border-color: getColor('hover');

        &::placeholder {
            color: getColor('hover');
            opacity: 1;
        }
    }
}

.buttonInputDatePiker {
    &:hover svg {
        stroke: getColor('hover');
    }
}

.isOpenCalendar {
    & svg {
        stroke: getColor('general');
    }
}

.datePiker {
    position: absolute;
    left: 0;
    bottom: -380px;
    padding: 20px;
    width: 100%;
    border-radius: 11px;
    overflow: hidden;
    background-color: getColor('main');
    @include boxShadow();
    z-index: 1;

    @media screen and (min-width: $tablet) and (max-width: calc($desktop - 1px)) {
        top: -380px;
        bottom: auto;
    }
}

.calendar {
    border: 0;
    font-family: 'Poppins-Medium';
    @include font(12px, 16px);
    color: getColor('text-main');
}

.buttonLabelCalendarIcon {
    height: 20px;
    width: 20px;
    fill: getColor('disable');
    @include transition-effect(fill);
}

.tile {
    background-color: inherit;
    font-family: 'Poppins-Regular';
    color: getColor('disable');
    @include font(12px, 16px);
    @include transition-effect(color font-family);

    &:hover {
        background-color: inherit !important;
        font-family: 'Poppins-SemiBold';
        color: getColor('hover') !important;
    }
}

.buttonsCalendar {
    display: flex;
    justify-content: space-between ;
}

.buttonCalendarCancel {
    background-color: inherit;
    padding: 7px 15px;
    border-radius: 4px;
    border: 1px solid getColor('general');
    color: getColor('general');
    @include font(12px, 16px);
    @include transition-effect(color border-color);

    &:hover,
    &:focus {
        background-color: inherit;
        border-color: getColor('hover');
        color: getColor('hover');
    }
}

.buttonCalendarChooseDate {
    padding: 8px 16px;
    border-radius: 4px;
    @include font(12px, 16px);
}

.wrraperTimePicker {
    position: relative;
    background-color: transparent;
    margin-top: 8px;
}

.timePicker {
    display: block;
    background-color: transparent;

    & > input {
        display: block;
        // padding: 16px calc(12px + 24px) 16px 12px;
        padding: 15px calc(11px + 24px) 15px 11px;
        font-family: 'Poppins-Regular';
        @include font(16px, 24px);
        color: getColor('text-main');
        border: 1px solid getColor('disable');
        border-radius: 8px;
        height: 56px;
        width: 100%;
        outline: transparent;
        cursor: pointer;
        opacity: 1;
        // pointer-events: none;
    
        &:focus {
            border-color: getColor('general');
        }

        &:hover {
            border-color: getColor('hover');
        }
    }

    & > input::placeholder {
        opacity: 1;
        color: transparent;
        @include transition-effect(color);
    }

    &:hover > input::placeholder {
        color: getColor('hover');
    }
}

.buttonTimePickerIcon {
    height: 24px;
    width: 24px;
    fill: transparent;
    stroke: getColor('disable');
    position: absolute;
    top: 16px;
    right: 12px;
    @include transition-effect(stroke);
    cursor: pointer;
    // z-index: 1;

    &:hover {
        stroke: getColor('hover');
    }
}

.buttonTimePickerIconIsActive {
    stroke: getColor('general');
}


.buttonSubmit {
    display: block;
    width: 100%;
    margin-top: 40px;

    @media screen and (min-width: $tablet) {
        display: block;
        width: 193px;
        margin-left: auto;
    }
}

.buttonSubmitDisable {
    background-color: getColor('disable');
    cursor: auto;

    &:hover,
    &:focus {
        background-color: getColor('disable');
    }
}